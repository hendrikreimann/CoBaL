%	FRF_fit_err_Reimann.m		27-May-2021%function mse = FRF_fit_err_Reimann(P_fit,F,FRF,J,mgh)%% Inputs: P_fit: current fit parameter values at each optimization interation%         F: vector of FRF frequencies (Hz)%         FRF: vector of FRF values (complex values)%         J: Subject moment of inertia about ankle joint%         mgh: Subject mass (excluding feet) times gravity constant time%                CoM height above ankle joint%% Output: mse: Fit error value%gn=P_fit(1);  % Sensory weightkp=P_fit(2);  % Neural Controller proportional gainkd=P_fit(3);  % Neural Controller derivative gainkff=P_fit(4); % Torque feedback gaintd=P_fit(5);  % Time delay%%  Form FRF estimate (frf) from current parameters%w=2*pi*F; % radian frequencys=1i*w;   % Laplace variableB=(ones(size(w)))./(J*(s.*s)-mgh*ones(size(w))); % body dynamicsNC=kd*s+kp;                  % neural controller dynamicsFF=(kff*ones(size(w)))./(s); % torque feedback term - an integrationTD=(cos(w*td)-1i*sin(w*td)); % time delayN=NC.*TD;frf=(gn*B.*N)./(ones(size(w)) - FF.*N + B.*N); % frf based on current parameter values%% fit error%d2=(FRF-frf)./abs(frf);	% normalize individual vectors by magnitude of fit at each frequencymse=mean(d2.*conj(d2)); % e=[mse gn kp*pi/180 kd*pi/180 kff*180/pi tff td] % this line can be%           uncommented to watch the progress of the optimization