%     This file is part of the CoBaL code base
%     Copyright (C) 2017 Hendrik Reimann <hendrikreimann@gmail.com>
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

% this function applies several basic processing steps to experimental data, e.g. filtering

% input: 
% Experimental data files generated by importAscii.m, in the subfolder "raw"
%
% output: 
% multiple files with processed data for each trial, in the subfolder "processed"


function preprocessEmgData(varargin)
    % parse arguments
    [types_to_analyze, trials_to_analyze, types_to_exclude, trials_to_exclude] = parseTrialArguments(varargin{:});
    parser = inputParser;
    parser.KeepUnmatched = true;
    addParameter(parser, 'type', 'all')
    addParameter(parser, 'visualize', false)
    parse(parser, varargin{:})
    visualize = parser.Results.visualize;

    % add excluded trials back in, because while we don't want to analyze them, we still want to pre-process them
    types_to_analyze = [types_to_analyze; types_to_exclude];
    trials_to_analyze = [trials_to_analyze; trials_to_exclude];
    
    % load settings
    study_settings = loadSettingsFromFile('study');
    subject_settings = loadSettingsFromFile('subject');
    
    data_dir = dir(['raw' filesep '*_emgTrajectoriesRaw.mat']);
    clear file_name_list;
    [file_name_list{1:length(data_dir)}] = deal(data_dir.name);
    number_of_files = length(file_name_list);
    for i_trial = 1 : number_of_files
        raw_emg_file_name = file_name_list{i_trial};
        [date, subject_id, trial_type, trial_number] = getFileParameters(raw_emg_file_name);

        % does the caller want to process this file?
        if any(strcmp(trial_type, types_to_analyze))
            % condition is set to be processed, now check trial number
            trial_number_list_this_condition = trials_to_analyze{strcmp(trial_type, types_to_analyze)};
            if ismember(trial_number, trial_number_list_this_condition)
                % process file
                loaded_data = load(['raw' filesep raw_emg_file_name]);
                
                % figure out variable
                if isfield(loaded_data, 'emg_trajectories_raw')
                    raw_emg_trajectories = loaded_data.emg_trajectories_raw;
                elseif isfield(loaded_data, 'emg_raw_trajectories')
                    raw_emg_trajectories = loaded_data.emg_raw_trajectories;
                end

                % define filters
                % initial low pass filter
                filter_order_low = 4;
                cutoff_frequency_low = subject_settings.get('emg_cutoff_frequency_low', 1);
                [b_low, a_low] = butter(filter_order_low, cutoff_frequency_low/(loaded_data.sampling_rate_emg/2), 'low');

                % high pass filter at 20 hz to get rid of DC offset
                filter_order_high = 4;
                cutoff_frequency_high = 20; % in Hz
                [b_high, a_high] = butter(filter_order_high, cutoff_frequency_high/(loaded_data.sampling_rate_emg/2), 'high');

                emg_trajectories_preRect_low = nanfiltfilt(b_low, a_low, raw_emg_trajectories);
                emg_trajectories_preRect_high = nanfiltfilt(b_high, a_high, emg_trajectories_preRect_low);

                % low pass filter below 10 Hz -- aggressive smoothing after rectification
                filter_order_final = 4;
                cutoff_frequency_final = 6; % in Hz
                [b_final, a_final] = butter(filter_order_final, cutoff_frequency_final/(loaded_data.sampling_rate_emg/2), 'low');

                % rectify, then filter
                emg_trajectories_rectified = abs(emg_trajectories_preRect_high);
                emg_trajectories = nanfiltfilt(b_final, a_final, emg_trajectories_rectified);

                % apply time offset
                time_emg = loaded_data.time_emg + study_settings.get('emg_time_offset');
                sampling_rate_emg = loaded_data.sampling_rate_emg;
                emg_labels = loaded_data.emg_labels;
                
                % save
                emg_directions = loaded_data.emg_directions(:, 1:length(loaded_data.emg_labels));
                save_folder = 'processed';
                save_file_name = makeFileName(date, subject_id, trial_type, trial_number, 'emgTrajectories.mat');
                save ...
                  ( ...
                    [save_folder filesep save_file_name], ...
                    'emg_trajectories', ...
                    'time_emg', ...
                    'sampling_rate_emg', ...
                    'emg_labels', ...
                    'emg_directions' ...
                  );
                addAvailableData ...
                  ( ...
                    'emg_trajectories', ...
                    'time_emg', ...
                    'sampling_rate_emg', ...
                    '_emg_labels', ...
                    '_emg_directions', ...
                    save_folder, ...
                    save_file_name ...
                  );



                disp(['filtered and saved as ' save_file_name])

                % visualize
                if visualize
                    i_channel = 12;
                    figure; axes; hold on; title(['EMG, condition ' trial_type ', trial ' num2str(trial_number)])
                    plot(time_emg, raw_emg_trajectories(:, i_channel), 'DisplayName', 'raw');
                    plot(time_emg, loaded_data.emg_trajectories_rectified(:, i_channel), 'DisplayName', 'rectified');
%                     plot(time_emg, emg_rms_rectified(:, i_channel), 'DisplayName', 'rms rectified', 'linewidth', 2);
%                         plot(time_emg, emg_rms_smoothed(:, i_channel), 'DisplayName', 'rms smoothed', 'linewidth', 2);
%                         plot(time_emg, emg_trajectories_filtered_lowpass(:, i_channel), 'DisplayName', 'lowpass');
%                         plot(time_emg, emg_trajectories_filtered_highpass(:, i_channel), 'DisplayName', 'highpass');
                    plot(time_emg,emg_trajectories_preRect_high(:, i_channel), 'DisplayName', 'preRectified')
                    plot(time_emg, emg_trajectories(:, i_channel), 'linewidth', 2, 'DisplayName', 'final');
                    legend('toggle');
                    input('Continue?')
                end                        
            end
        end
    end
    
    


    
    
    
    
    
    
    
    
end
