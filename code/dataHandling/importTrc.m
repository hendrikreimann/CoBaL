%     This file is part of the CoBaL code base
%     Copyright (C) 2018 Hendrik Reimann <hendrikreimann@gmail.com>
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

% this script transform raw data from ascii into matlab format

% input: 
% Experimental data files generated by e.g. Nexus, QTM, labview etc.
% Files are expected to be in subfolders named <subject code>_<source type>, e.g. XYZ_labview
% any source type is viable, but if it is not in the default list, it must be specified as a name-value pair, 
% e.g. importAscii('sources', 'someSource') would look for data in the subfolder XYZ_someSource
%
% output: 
% Files containing the same data in .mat format, with some additional information about where they came from.
% Output files will be saved to folders "raw" and "processed".

function importTrc(varargin)

    parser = inputParser;
    parser.KeepUnmatched = true;
    sources_default = {'marker', 'trc', 'ascii'};
    addParameter(parser, 'sources', sources_default)
    parse(parser, varargin{:})
    sources = parser.Results.sources;

    %% prepare

    % set some parameters
    millimeter_to_meter = 1e-3;
    centimeter_to_meter = 1e-2;
    milliseconds_to_seconds = 1e-3;
    qtm_emg_scale = 1;

    % create folders if necessary
    if ~directoryExists('raw')
        mkdir('raw')
    end
    if ~directoryExists('processed')
        mkdir('processed')
    end
    if ~directoryExists('analysis')
        mkdir('analysis')
    end
    current_path = pwd;
    path_split = strsplit(current_path, filesep);
    subject_code = path_split{end};

    %% import data
    for i_source = 1 : length(sources)
        source_dir = sources{i_source};
        if exist(source_dir, 'dir')
            % get list of files to import from this directory
            clear file_name_list;
            data_dir = dir([source_dir filesep '*trc']);
            [file_name_list{1:length(data_dir)}] = deal(data_dir.name);

            % go through files and import
            number_of_files = length(file_name_list);
            for i_file = 1 : number_of_files
                % file name stuff
                data_file_name = file_name_list{i_file};
                [date, subject_id, trial_type, trial_number, file_type] = getFileParameters(data_file_name);

                number_of_header_lines = 6;
                data_source = 'cortex';
                
                % import data
                [imported_data, delimiter, number_of_header_lines_returned] = importdata([source_dir filesep data_file_name], '\t', number_of_header_lines);
                if isstruct(imported_data)
                    % extract info
%                     data_class = imported_data.textdata{number_of_header_lines_returned-4, 1};
%                     data_group = strsplit(imported_data.textdata{number_of_header_lines_returned-2, 1}, ',');
                    data_info_headers = strsplit(imported_data.textdata{2, 1}, '\t');
                    data_info = strsplit(imported_data.textdata{3, 1}, '\t');
                    data_headers = strsplit(imported_data.textdata{4, 1}, '\t');

                    number_of_samples = size(imported_data.data, 1);

                    % deal with marker data
                    marker_trajectories_raw = imported_data.data(:, 3:end) * millimeter_to_meter;
                    sampling_rate_mocap = str2num(data_info{strcmp(data_info_headers, 'DataRate')});
                    time_mocap =imported_data.data(:, 2);

                    % triplicate labels
                    marker_headers = data_headers(3:end-1);
                    number_of_markers = str2num(data_info{strcmp(data_info_headers, 'NumMarkers')});
                    marker_labels = cell(3, number_of_markers);
                    for i_marker = 1 : number_of_markers
                        marker_labels{1, i_marker} = [marker_headers{i_marker} '_x'];
                        marker_labels{2, i_marker} = [marker_headers{i_marker} '_y'];
                        marker_labels{3, i_marker} = [marker_headers{i_marker} '_z'];
                    end
                    marker_labels = reshape(marker_labels, 1, number_of_markers*3);

                    % make directions
                    % NOTE: this defines directions and makes assumptions, make sure everything is right here
                    number_of_marker_trajectories = size(marker_trajectories_raw, 2);
                    marker_directions = cell(2, number_of_marker_trajectories);
                    [marker_directions{1, 1 : 3 : number_of_marker_trajectories}] = deal('backward');
                    [marker_directions{2, 1 : 3 : number_of_marker_trajectories}] = deal('forward');
                    [marker_directions{1, 2 : 3 : number_of_marker_trajectories}] = deal('right');
                    [marker_directions{2, 2 : 3 : number_of_marker_trajectories}] = deal('left');
                    [marker_directions{1, 3 : 3 : number_of_marker_trajectories}] = deal('up');
                    [marker_directions{2, 3 : 3 : number_of_marker_trajectories}] = deal('down');

                    % save
                    save_folder = 'raw';
                    if isempty(file_type)
                        save_file_name = makeFileName(date, subject_id, trial_type, trial_number, 'markerTrajectoriesRaw.mat');
                        save ...
                          ( ...
                            [save_folder filesep save_file_name], ...
                            'marker_trajectories_raw', ...
                            'time_mocap', ...
                            'data_source', ...
                            'sampling_rate_mocap', ...
                            'marker_labels',  ...
                            'marker_directions' ...
                          );
                        addAvailableData ...
                          ( ...
                            'marker_trajectories_raw', ...
                            'time_mocap', ...
                            'sampling_rate_mocap', ...
                            '_marker_labels', ...
                            '_marker_directions', ...
                            save_folder, ...
                            save_file_name ...
                          );
                    else
                        eval([lower(file_type) '_trajectories_raw = marker_trajectories_raw;']);
                        eval([lower(file_type) '_labels = marker_labels;']);
                        eval([lower(file_type) '_directions = marker_directions;']);
                        
                        save_file_name = makeFileName(date, subject_id, trial_type, trial_number, [lower(file_type) 'TrajectoriesRaw.mat']);
                        save ...
                          ( ...
                            [save_folder filesep save_file_name], ...
                            [lower(file_type) '_trajectories_raw'], ...
                            'time_mocap', ...
                            'data_source', ...
                            'sampling_rate_mocap', ...
                            [lower(file_type) '_labels'],  ...
                            [lower(file_type) '_directions'] ...
                          );
                        addAvailableData ...
                          ( ...
                            [lower(file_type) '_trajectories_raw'], ...
                            'time_mocap', ...
                            'sampling_rate_mocap', ...
                            ['_' lower(file_type) '_labels'], ...
                            ['_' lower(file_type) '_directions'], ...
                            save_folder, ...
                            save_file_name ...
                          );
                    end

                else
                    import_more_data = 0;
                end

                disp(['imported ' source_dir filesep data_file_name])

            end

            disp(['imported ' num2str(number_of_files) ' files'])        






        end

    end

end















