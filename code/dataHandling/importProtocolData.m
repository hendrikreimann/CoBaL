%     This file is part of the CoBaL code base
%     Copyright (C) 2017 Hendrik Reimann <hendrikreimann@gmail.com>
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

% this script transform raw data from ascii into matlab format

% input:
% Experimental data files generated by e.g. Nexus, QTM, labview etc.
% Files are expected to be in subfolders named <subject code>_<source type>, e.g. XYZ_labview
% any source type is viable, but if it is not in the default list, it must be specified as a name-value pair,
% e.g. importAscii('sources', 'someSource') would look for data in the subfolder XYZ_someSource
%
% output:
% Files containing the same data in .mat format, with some additional information about where they came from.
% Output files will be saved to folders "raw" and "processed".

function importProtocol(varargin)
    % parse arguments
    parser = inputParser;
    parser.KeepUnmatched = true;
    addParameter(parser, 'visualize', false)
    parse(parser, varargin{:})


    %% prepare
    % set some parameters
    milliseconds_to_seconds = 1e-3;
    
    labview_source_dir = 'labview';

    % import protocol
    protocol_file_name = [labview_source_dir filesep 'protocol.csv'];
    if ~exist(protocol_file_name, 'file')
        error(['File ' protocol_file_name ' not found.']);
    else
        % we have a protocol file, so import that
        warning('off', 'MATLAB:table:ModifiedAndSavedVarnames')
        imported_table = readtable(protocol_file_name);
        warning('on', 'MATLAB:table:ModifiedAndSavedVarnames')

        % read header line manually, since readtable doesn't deal with it properly
        fileID = fopen(protocol_file_name, 'r');
        header_line = fgetl(fileID);
        fclose(fileID);
        headers = strsplit(header_line, ',');

        table_headers = imported_table.Properties.VariableNames;
        protocol_trial_type = imported_table.(table_headers{strcmp(headers, 'Trial Type')});
        protocol_trial_number = imported_table.(table_headers{strcmp(headers, 'Trial Number')});
        protocol_trial_duration = imported_table.(table_headers{strcmp(headers, 'Duration (s)')});
        protocol_metronome_cadence = imported_table.(table_headers{strcmp(headers, 'Use Metronome (0/1)')});
        protocol_trial_saved = imported_table.(table_headers{strcmp(headers, 'save data (0/1)')});
        protocol_count_left_step = imported_table.(table_headers{strcmp(headers, 'Count left steps (0/1)')});
        protocol_count_right_step = imported_table.(table_headers{strcmp(headers, 'Count right steps (0/1)')});
        protocol_stim_visual_intermittent = imported_table.(table_headers{strcmp(headers, 'Use Visual Stimulus - intermittent')});
        protocol_stim_gvs_intermittent = imported_table.(table_headers{strcmp(headers, 'GVS intermittent')});
%         protocol_randomization = imported_table.(table_headers{strcmp(headers, 'Randomization')});

        % save protocol data
        protocol_data = struct;
        protocol_data.trial_type = protocol_trial_type;
        protocol_data.trial_number = protocol_trial_number;
        protocol_data.trial_duration = protocol_trial_duration;
        protocol_data.metronome_cadence = protocol_metronome_cadence;
        protocol_data.trial_saved = protocol_trial_saved;
        protocol_data.count_left_step = protocol_count_left_step;
        protocol_data.count_right_step = protocol_count_right_step;
        protocol_data.stim_visual_intermittent = protocol_stim_visual_intermittent;
        protocol_data.stim_gvs_intermittent = protocol_stim_gvs_intermittent;
        save_file_name = 'protocolInfo.mat';
        save(save_file_name, '-struct', 'protocol_data');
        
        disp(['imported ' protocol_file_name])
    end

    % import object randomization
    object_file_name = ['labview' filesep 'ObjectRandomization.csv'];
    if exist(object_file_name, 'file')
        imported_table = readtable([labview_source_dir filesep 'ObjectRandomization.csv']);

        fileID = fopen([labview_source_dir filesep 'ObjectRandomization.csv'], 'r');
        header_line = fgetl(fileID);
        fclose(fileID);
        headers = strsplit(header_line, ',');

        table_headers = imported_table.Properties.VariableNames;

        virtual_object_info = struct;
        protocol_virtual_object_ap_location = imported_table.(table_headers{strcmp(headers, 'LaneCenter')});
        protocol_virtual_ojbect_ml_location =  imported_table.(table_headers{strcmp(headers, 'Color')});
        virtual_object_info.virtual_object_ap_location = protocol_virtual_object_ap_location;
        virtual_object_info.virtual_object_ml_location = protocol_virtual_ojbect_ml_location;

        save_file_name = 'virtualobjectInfo.mat';
        save(save_file_name, '-struct', 'virtual_object_info');
        
        disp(['imported ' object_file_name])
        
    end




end





















  
