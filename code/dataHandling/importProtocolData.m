%     This file is part of the CoBaL code base
%     Copyright (C) 2017 Hendrik Reimann <hendrikreimann@gmail.com>
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

% this script transform raw data from ascii into matlab format

% input:
% Experimental data files generated by e.g. Nexus, QTM, labview etc.
% Files are expected to be in subfolders named <subject code>_<source type>, e.g. XYZ_labview
% any source type is viable, but if it is not in the default list, it must be specified as a name-value pair,
% e.g. importAscii('sources', 'someSource') would look for data in the subfolder XYZ_someSource
%
% output:
% Files containing the same data in .mat format, with some additional information about where they came from.
% Output files will be saved to folders "raw" and "processed".

function importProtocolData(varargin)
    % parse arguments
    parser = inputParser;
    parser.KeepUnmatched = true;
    addParameter(parser, 'visualize', false)
    parse(parser, varargin{:})


    %% prepare
    % set some parameters
    labview_source_dir = 'labview';

    % import protocol
    protocol_file_name = [labview_source_dir filesep 'protocol.csv'];
    if ~exist(protocol_file_name, 'file')
        error(['File ' protocol_file_name ' not found.']);
    else
        % we have a protocol file, so import that
        warning('off', 'MATLAB:table:ModifiedAndSavedVarnames')
        imported_table = readtable(protocol_file_name);
        warning('on', 'MATLAB:table:ModifiedAndSavedVarnames')

        % read header line manually, since readtable doesn't deal with it properly
        fileID = fopen(protocol_file_name, 'r');
        header_line = fgetl(fileID);
        fclose(fileID);
        headers = strsplit(header_line, ',');

        table_headers = imported_table.Properties.VariableNames;
        
        protocol_data = struct;
        for i_column = 1 : numel(headers)
            this_variable_label = headers{i_column};
            this_variable_table_header = table_headers{i_column};
            this_variable_name = nameFromLabel(this_variable_label, this_variable_table_header);
            protocol_data.(this_variable_name) = imported_table.(this_variable_table_header);
        end
        
        save_file_name = 'protocolInfo.mat';
        save(save_file_name, '-struct', 'protocol_data');
        
        disp(['imported ' protocol_file_name])
    end

    % import object randomization
    object_file_name = ['labview' filesep 'ObjectRandomization.csv'];
    if exist(object_file_name, 'file')
        imported_table = readtable([labview_source_dir filesep 'ObjectRandomization.csv']);

        fileID = fopen([labview_source_dir filesep 'ObjectRandomization.csv'], 'r');
        header_line = fgetl(fileID);
        fclose(fileID);
        headers = strsplit(header_line, ',');

        table_headers = imported_table.Properties.VariableNames;

        virtual_object_info = struct;
        protocol_virtual_object_ap_location = imported_table.(table_headers{strcmp(headers, 'LaneCenter')});
        protocol_virtual_ojbect_ml_location =  imported_table.(table_headers{strcmp(headers, 'Color')});
        virtual_object_info.virtual_object_ap_location = protocol_virtual_object_ap_location;
        virtual_object_info.virtual_object_ml_location = protocol_virtual_ojbect_ml_location;

        save_file_name = 'virtualobjectInfo.mat';
        save(save_file_name, '-struct', 'virtual_object_info');
        
        disp(['imported ' object_file_name])
        
    end



end

function variable_name = nameFromLabel(header_label, table_header_label)
    variable_name = table_header_label;
    
    if strcmp(header_label, 'Trial Type')
        variable_name = 'trial_type';
    end
    if strcmp(header_label, 'Trial Type')
        variable_name = 'trial_type';
    end
    if strcmp(header_label, 'Trial Number')
        variable_name = 'trial_number';
    end
    if strcmp(header_label, 'Duration (s)')
        variable_name = 'trial_duration';
    end
    if strcmp(header_label, 'Use Metronome (0/1)')
        variable_name = 'metronome_cadence';
    end
    if strcmp(header_label, 'Use Metronome (0/BPM)')
        variable_name = 'metronome_cadence';
    end
    if strcmp(header_label, 'save data (0/1)')
        variable_name = 'trial_saved';
    end
    if strcmp(header_label, 'Count left steps (0/1)')
        variable_name = 'count_left_step';
    end
    if strcmp(header_label, 'Count right steps (0/1)')
        variable_name = 'count_right_step';
    end
    if strcmp(header_label, 'Use Visual Stimulus - intermittent')
        variable_name = 'stim_visual_intermittent';
    end
    if strcmp(header_label, 'Use Visual Stimulus - PTRS')
        variable_name = 'stim_visual_ptrs';
    end
    if strcmp(header_label, 'GVS intermittent')
        variable_name = 'stim_gvs_intermittent';
    end
    if strcmp(header_label, 'Stimulus File')
        variable_name = 'stimulus_file_name';
    end
    if strcmp(header_label, 'Stimulus Gain')
        variable_name = 'stimulus_gain';
    end
    if strcmp(header_label, 'Metronome File')
        variable_name = 'metronome_file_name';
    end
end


















  
