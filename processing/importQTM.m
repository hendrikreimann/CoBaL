%     This file is part of the CoBaL code base
%     Copyright (C) 2017 Hendrik Reimann <hendrikreimann@gmail.com>
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

% this script transform raw data from ascii into matlab format

% input: 
% Experimental data files generated by e.g. Nexus, QTM, labview etc.
% Files are expected to be in subfolders named <subject code>_<source type>, e.g. XYZ_labview
% any source type is viable, but if it is not in the default list, it must be specified as a name-value pair, 
% e.g. importAscii('sources', 'someSource') would look for data in the subfolder XYZ_someSource
%
% output: 
% Files containing the same data in .mat format, with some additional information about where they came from.
% Output files will be saved to folders "raw" and "processed".

function importQTM(varargin)
    parser = inputParser;
    parser.KeepUnmatched = true;
    sources_default = {'qtm', 'labview'};
    addParameter(parser, 'sources', sources_default)
    parse(parser, varargin{:})
    sources = parser.Results.sources;

    %% prepare
    % set some parameters
    millimeter_to_meter = 1e-3;
    centimeter_to_meter = 1e-2;
    milliseconds_to_seconds = 1e-3;
    qtm_emg_scale = 1;
    
    % create folders if necessary
    if ~exist('analysis', 'dir')
        mkdir('analysis')
    end
    if ~exist('raw', 'dir')
        mkdir('raw')
    end
    if ~exist('processed', 'dir')
        mkdir('processed')
    end
   
    current_path = pwd;
    path_split = strsplit(current_path, filesep);
    subject_code = path_split{end};

    %% import data
    for i_source = 1 : length(sources)
        source_dir = sources{i_source};
        if exist(source_dir, 'dir')
            
            % get list of files to import from this directory
            clear file_name_list_csv;
            data_dir_csv = dir([source_dir filesep '*csv']);
            [file_name_list_csv{1:length(data_dir_csv)}] = deal(data_dir_csv.name);

            clear file_name_list_mat;
            data_dir_mat = dir([source_dir filesep '*mat']);
            [file_name_list_mat{1:length(data_dir_mat)}] = deal(data_dir_mat.name);

            file_name_list = [file_name_list_mat file_name_list_csv];
            
             % go through files and import
            number_of_files = length(file_name_list);
            for i_file = 1 : number_of_files
                % file name stuff
                data_file_name = file_name_list{i_file};
                [date, subject_id, trial_type, trial_number, file_type] = getFileParameters(data_file_name);
                % create file name for other labview file in order to check
                % time trajectory
                if strcmp(file_type, 'protocolData')
                   time_comparison_file_type = 'PLCData';
                   time_comparison_file_name = makeFileName(date, subject_id, trial_type, trial_number, time_comparison_file_type);
                elseif strcmp(file_type, 'PLCData')
                   time_comparison_file_type = 'protocolData';
                   time_comparison_file_name = makeFileName(date, subject_id, trial_type, trial_number, time_comparison_file_type);
                end
                
            if isempty(file_type)
                if data_file_name(end-2) == 'm';
                    file_type = 'qualisysData';
                else
                    file_type = 'unknown';
                end
            end
            
            %% qualisys
            if strcmp(file_type, 'qualisysData')
                 % this is marker data from QTM
            %% unknown
            elseif strcmp(file_type, 'unknown')
                disp(['FAILED to import ' data_file_name])

            %% labview
            else
                % assume this is labview data
                [imported_data, delimiter, nheaderlines] = importdata([source_dir filesep data_file_name], ',', 2);
                [time_comparison_imported_data, delimiter, nheaderlines] = importdata([source_dir filesep time_comparison_file_name '.csv'], ',', 2);
                
                labview_trajectories = imported_data.data;     
                time_comparison_labview_trajectories = time_comparison_imported_data.data;
                
                    % extract headers
                    column_name_string = imported_data.textdata{1, 1};
                    labview_header = strsplit(column_name_string, ',');
                    number_of_data_columns = size(imported_data.textdata, 2);

                    % extract data into properly named variables
                    variables_to_save = struct();
                    variables_to_save_list = {};
                    for i_column = 1 : number_of_data_columns
                        variable_name = [strrep(labview_header{i_column}, ' ', '_'), '_trajectory'];
                        extract_string = ['variables_to_save.' variable_name ' = labview_trajectories(:, i_column);'];
                        eval(extract_string);
                        variables_to_save_list = [variables_to_save_list; variable_name];
                    end
                                        
                    % take special care of time, transform to seconds and rename according to file type
                    if isrow(variables_to_save.time_trajectory)
                        variables_to_save.time_trajectory = variables_to_save.time_trajectory';
                    end
                    eval(['variables_to_save.time = variables_to_save.time_trajectory * milliseconds_to_seconds;']);
                    
                    % find out which time trajectory starts earlier..
                    labview_loop_timing_difference = variables_to_save.time_trajectory(1) - time_comparison_labview_trajectories(1,1);
                    if labview_loop_timing_difference <= 0
                        variables_to_save.time = variables_to_save.time - variables_to_save.time(1);
                    elseif labview_loop_timing_difference >= 0
                        variables_to_save.time = variables_to_save.time - variables_to_save.time(1) + labview_loop_timing_difference/milliseconds_to_seconds;
                    end
                    
                    variables_to_save = rmfield(variables_to_save, 'time_trajectory');
                    variables_to_save_list(strcmp(variables_to_save_list, 'time_trajectory')) = [];

                    % add data source
                    variables_to_save.data_source = 'labview'; % not tested yet
                    
                    % add sampling rate
                    variables_to_save.sampling_rate = NaN;

                    % save
                    save_folder = 'processed';
                    save_file_name = makeFileName(date, subject_id, trial_type, trial_number, file_type);
                    save([save_folder filesep save_file_name], '-struct', 'variables_to_save');
                    
                    for i_variable = 1 : length(variables_to_save_list)
                        if ~checkDataAvailability(date, subject_id, trial_type, trial_number, variables_to_save_list{i_variable})
                            addAvailableData(variables_to_save_list{i_variable}, 'time', 'sampling_rate', variables_to_save_list{i_variable}, save_folder, save_file_name);
                        end
                    end
                    
                    disp(['imported ' source_dir filesep data_file_name ' and saved as ' save_folder filesep save_file_name])
            end
            
        end
    end
            
end