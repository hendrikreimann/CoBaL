function [A, ADot] = createConstraintMatrix_bodyVelocityConstraints_24 ...
  ( ...
    plant, ... 
    constraintDecimal, ...
    rightAnkleElevation, ...
    leftAnkleElevation, ...
    polyfitBodyVelocityRightHeelRoll, ...
    polyfitBodyVelocityRightToesRoll, ...
    polyfitBodyVelocityLeftHeelRoll, ...
    polyfitBodyVelocityLeftToesRoll ...
  )

    constraint_binary = de2bi(constraintDecimal, 4);
    right_heel_contact = constraint_binary(1);
    right_toes_contact = constraint_binary(2);
    left_heel_contact = constraint_binary(3);
    left_toes_contact = constraint_binary(4);

    right_ankle_body_jacobian = plant.bodyJacobians{3};
    right_ankle_body_jacobian_dot = plant.bodyJacobianTemporalDerivatives{3};
    left_ankle_body_jacobian = plant.bodyJacobians{6};
    left_ankle_body_jacobian_dot = plant.bodyJacobianTemporalDerivatives{6};
    
    if ~right_heel_contact && ~right_toes_contact
        % no constraint at all
        right_foot_constraint = [];
        right_foot_constraint_dot = [];
    elseif right_heel_contact && ~right_toes_contact
        psi_right_ankle = ...
          [ ...
            polyval(polyfitBodyVelocityRightHeelRoll(1, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightHeelRoll(2, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightHeelRoll(3, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightHeelRoll(4, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightHeelRoll(5, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightHeelRoll(6, :), rightAnkleElevation) ...
          ];

        [~, ~, V_psi] = svd(psi_right_ankle');
        C = V_psi(:, 2:6)';
        right_foot_constraint = C * right_ankle_body_jacobian;
        right_foot_constraint_dot = C * right_ankle_body_jacobian_dot;
    elseif ~right_heel_contact && right_toes_contact
        psi_right_ankle = ...
          [ ...
            polyval(polyfitBodyVelocityRightToesRoll(1, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightToesRoll(2, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightToesRoll(3, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightToesRoll(4, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightToesRoll(5, :), rightAnkleElevation); ...
            polyval(polyfitBodyVelocityRightToesRoll(6, :), rightAnkleElevation) ...
          ];
        [~, ~, V_psi] = svd(psi_right_ankle');
        C = V_psi(:, 2:6)';
        right_foot_constraint = C * right_ankle_body_jacobian;
        right_foot_constraint_dot = C * right_ankle_body_jacobian_dot;
    elseif right_heel_contact && right_toes_contact
        right_foot_constraint = right_ankle_body_jacobian;
        right_foot_constraint_dot = right_ankle_body_jacobian_dot;
    end

    if ~left_heel_contact && ~left_toes_contact
        % no constraint at all
        left_foot_constraint = [];
        left_foot_constraint_dot = [];
    elseif left_heel_contact && ~left_toes_contact
        psi_left_ankle = ...
          [ ...
            polyval(polyfitBodyVelocityLeftHeelRoll(1, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftHeelRoll(2, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftHeelRoll(3, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftHeelRoll(4, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftHeelRoll(5, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftHeelRoll(6, :), leftAnkleElevation) ...
          ];

        [~, ~, V_psi] = svd(psi_left_ankle');
        C = V_psi(:, 2:6)';
        left_foot_constraint = C * left_ankle_body_jacobian;
        left_foot_constraint_dot = C * left_ankle_body_jacobian_dot;
    elseif ~left_heel_contact && left_toes_contact
        psi_left_ankle = ...
          [ ...
            polyval(polyfitBodyVelocityLeftToesRoll(1, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftToesRoll(2, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftToesRoll(3, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftToesRoll(4, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftToesRoll(5, :), leftAnkleElevation); ...
            polyval(polyfitBodyVelocityLeftToesRoll(6, :), leftAnkleElevation) ...
          ];
        [~, ~, V_psi] = svd(psi_left_ankle');
        C = V_psi(:, 2:6)';
        left_foot_constraint = C * left_ankle_body_jacobian;
        left_foot_constraint_dot = C * left_ankle_body_jacobian_dot;
    elseif left_heel_contact && left_toes_contact
        left_foot_constraint = left_ankle_body_jacobian;
        left_foot_constraint_dot = left_ankle_body_jacobian_dot;
    end

    % concatenate to a single constraint matrix
    if numel(right_foot_constraint) + numel(left_foot_constraint) == 0
        A = zeros(1, plant.numberOfJoints);
        ADot = zeros(1, plant.numberOfJoints);
    else
        A = [right_foot_constraint; left_foot_constraint];
        ADot = [right_foot_constraint_dot; left_foot_constraint_dot];
    end

end